from wrapper_bot import TelegramBotWrapper
import asyncio
import asyncio
from aiogram import types, Dispatcher, Router
from aiogram.types import Message, BotCommand, InputFile, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.types import (
    Message,
    InputMediaPhoto,
    InputMedia,
    ContentType,
    InputMediaAnimation,
)

from decouple import config
from wrapper_bot import TelegramBotWrapper

# from utils import *
from wrapper_bot import TelegramBotWrapper
from aiogram import Dispatcher, types

from decouple import config

from aiogram.types import FSInputFile, URLInputFile

from aiogram.methods.edit_message_media import EditMessageMedia
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiosqlite
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.types import Message, BotCommand
from aiogram import types

TOKEN = config("TOKEN", cast=str, default="–ø—É—Å—Ç–æ")
bot = TelegramBotWrapper(TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user_to_db(user_id, username, first_name, last_name):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
    async with aiosqlite.connect("sqlite.db") as conn:
        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        async with conn.cursor() as cursor:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute(
                """
                INSERT INTO users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
                """,
                (user_id, username, first_name, last_name),
            )
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await conn.commit()


async def gipsokarton_key(message: types.Message):
    builder = ReplyKeyboardBuilder()
    list_products = [
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä–∫–∞—Å–∞ –¥–ª—è –æ–±—ä—ë–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
        "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω ",
        "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫",
        "–û—Ç–¥–µ–ª–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤",
    ]
    # for i in range(1, 5):
    for i in list_products:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


# =================================================================


async def plitka_key(message: types.Message):
    builder = ReplyKeyboardBuilder()
    list_products = [
        "–ü–æ–ª",
        "–°—Ç–µ–Ω—ã",
        "–°–∞–Ω—É–∑–µ–ª",
        "–û–±—ä—ë–º",
        "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    ]
    # for i in range(1, 5):
    for i in list_products:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(2, 2, 1, 1)
    reply_markup = builder.as_markup(resize_keyboard=True)
    # return reply_markup
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


async def plitka_key_choice_price(message: types.Message, key=None):
    if key == 1:
        text = f"–£–∫–ª–∞–¥–∫–∞ –ø–æ–ª ...\n–¶–µ–Ω–∞ –æ—Ç 1800 —Ä—É–±\n"
        media = FSInputFile("plitka_pol.jpg")

    if key == 2:
        text = f"–£–∫–ª–∞–¥–∫–∞  —Å–∞–Ω—É–∑–µ–ª...\n–¶–µ–Ω–∞ –æ—Ç 1800 —Ä—É–±\n"
        media = FSInputFile("plitka_sanuzel.jpeg")
    if key == 3:
        text = f"–£–∫–ª–∞–¥–∫–∞ –æ–±—ä—ë–º...\n–¶–µ–Ω–∞ –æ—Ç 1300 —Ä—É–±\n"
        media = FSInputFile("ob'em.jpg")

    builder = ReplyKeyboardBuilder()

    list_products = ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏"]
    # for i in range(1, 5):
    for i in list_products:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(2)

    print(message.message_id)

    # try:
    #     await bot.edit_message_text(
    #         chat_id=message.chat.id,
    #         message_id=1226,
    #         # reply_markup=builder.as_markup(resize_keyboard=True),
    #         text=f"{text} +",
    #     )
    # except Exception as e:
    #     print(e)

    # await message.reply(
    #     # chat_id=message.chat.id,
    #     # reply_markup=builder.as_markup(resize_keyboard=True),
    #     text=text,
    # )

    # =================================================================
    print(message.chat.id)
    print(message.message_id)

    x = await bot.send_photo(message.chat.id, photo=media)
    print(x.message_id, "< -------- x.message_id ")

    # reply_markup = InlineKeyboardMarkup(
    #     inline_keyboard=[
    #         [
    #             InlineKeyboardButton(
    #                 text="edit",
    #                 callback_data=f"id{x.message_id}",
    #             )
    #         ],
    #     ]
    # )
    await bot.send_message(chat_id=message.chat.id, text=text)
    # await bot.edit_message_media(
    #     chat_id=message.chat.id,
    #     message_id=message.message_id + 2,
    #     media=InputMediaPhoto(media=media),
    # )
    # await message.answer(

    #     reply_markup=builder.as_markup(resize_keyboard=True),
    # )


# =================================================================
async def application(message: types.Message, key=None):

    contact_button = KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è", request_contact=True
    )
    contact_admin = KeyboardButton(
        text="–ù–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞ ‚òéÔ∏è",
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[contact_button, contact_admin]], resize_keyboard=True
    )
    # keyboard.add(contact_button)

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏\n–≤–æ–∑–º–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞",
        reply_markup=keyboard,
    )
